name: Build and Deploy MCAddon

on:
  push:
    branches:
      - master # Changed from main to master

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest # Or your preferred OS
    permissions:
      contents: write # Grant write permission for creating releases

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Version from Commit Message
        id: get_version
        run: |
          # Get the latest commit message
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)

          # Use grep and sed to find the version number after 'v'
          # This will extract the first occurrence of a 'v' followed by numbers and dots.
          # If no version is found, it will default to 'latest'.
          VERSION=$(echo "$COMMIT_MESSAGE" | grep -oP 'v\d+(\.\d+)*' | head -1 | sed 's/^v//')

          # If no version was found, set a default or indicate it.
          if [ -z "$VERSION" ]; then
            VERSION="latest" # Default version if not found
          fi

          echo "Extracted Version: $VERSION"
          echo "ADDON_VERSION=$VERSION" >> $GITHUB_ENV # Set as environment variable for later steps

      - name: Package Resource Pack
        run: |
          # Assume your resource pack is in a folder named 'resources'
          # This command zips the contents of the folder.
          # Adjust 'resources/*' if your resource pack folder has a different name.
          zip -r Feather_Essentials_RP.mcpack resources/*

      - name: Package Behavior Pack
        run: |
          # Your behavior pack files are at the root of the repository.
          # Zip the contents of the current directory (.) excluding
          # certain files/folders that are not part of the behavior pack.
          # CAREFULLY list all items at the root to exclude that ARE NOT
          # part of your behavior pack.
          zip -r Feather_Essentials_BP.mcpack . \
            -x ".git/*" \
            -x ".github/*" \
            -x "resources/*" \
            -x "addon_temp/*" \
            -x "Feather_Essentials_RP.mcpack" \
            # Add other exclusions here if needed (e.g., build scripts, documentation)

      - name: Combine Packs and Rename to MCAddon
        run: |
          # Create the .mcaddon file directly by zipping the .mcpack files
          # Ensure the .mcpack files are at the root of the zip
          zip Feather_Essentials_${{ env.ADDON_VERSION }}.mcaddon Feather_Essentials_RP.mcpack Feather_Essentials_BP.mcpack

          # Clean up the temporary .mcpack files
          rm Feather_Essentials_RP.mcpack Feather_Essentials_BP.mcpack

      - name: Create Release
        id: create_release # Give this step an ID so we can reference its outputs
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the automatically provided token
        with:
          # Use the extracted version for the tag and release name
          tag_name: v${{ env.ADDON_VERSION }}
          release_name: Feather Essentials Release v${{ env.ADDON_VERSION }}
          body: |
            Automated release of Feather Essentials.
            Version: ${{ env.ADDON_VERSION }}
            Download the .mcaddon file below.
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the automatically provided token
        with:
          # Use the extracted version in the asset path and name
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Feather_Essentials_${{ env.ADDON_VERSION }}.mcaddon
          asset_name: Feather_Essentials_${{ env.ADDON_VERSION }}.mcaddon
          asset_content_type: application/octet-stream

      - name: Install jq (if needed)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Send to Discord using curl with embed (using jq for JSON)
        run: |
          # Define the path to your generated .mcaddon file
          # Use the extracted version in the file name
          ADDON_FILE_PATH="./Feather_Essentials_${{ env.ADDON_VERSION }}.mcaddon"

          # Define your message content
          MESSAGE_CONTENT="A new version of Feather Essentials has been released! **v${{ env.ADDON_VERSION }}**"

          # Link to the GitHub release page
          # Accessing the output of the create_release step using its ID
          RELEASE_URL="${{ steps.create_release.outputs.html_url }}"

          # Use jq to construct the JSON payload, ensuring proper escaping
          PAYLOAD_JSON=$(jq -n \
            --arg content "$MESSAGE_CONTENT" \
            --arg release_url "$RELEASE_URL" \
            '{
              "content": null, # Set content to null when using embeds as the main message
              "embeds": [
                {
                  "title": "New Feather Essentials Release Available!",
                  "description": $content, # jq handles the escaping for $content
                  "color": 3447003, # A nice blue color (you can change this)
                  "url": $release_url,     # jq handles the escaping for $release_url
                  "footer": {
                    "text": "Automated Release"
                  }
                }
              ]
            }')

          # Use curl to send the file and the payload to the webhook
          curl -X POST -H "Content-Type: multipart/form-data" \
            -F "file=@${ADDON_FILE_PATH}" \
            -F "payload_json=${PAYLOAD_JSON}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

